/*
 * Author: vpetrigo
 * Task:
 * Реализуйте структуру данных типа “множество строк” на основе динамической хеш-таблицы с открытой адресацией. Хранимые строки непустые и состоят из строчных латинских букв. Начальный размер таблицы должен быть равным 8-ми. Перехеширование выполняйте в случае, когда коэффициент заполнения таблицы достигает 3/4.
 *
 * Структура данных должна поддерживать операции добавления строки в множество, удаления строки из множества и проверки принадлежности данной строки множеству.
 *
 * Для разрешения коллизий используйте квадратичное пробирование. i-ая проба
 *
 * g(k,i)=g(k,i−1)+i(modm). m - степень двойки.
 *
 * Каждая строка входных данных задает одну операцию над множеством. Запись операции состоит из типа операции и следующей за ним через пробел строки, над которой проводится операция.
 *
 * Тип операции  – один из трех символов:
 *   +  означает добавление данной строки в множество;
 *   -  означает удаление  строки из множества;
 *   ?  означает проверку принадлежности данной строки множеству.
 *
 * При добавлении элемента в множество НЕ ГАРАНТИРУЕТСЯ, что он отсутствует в этом множестве. При удалении элемента из множества НЕ ГАРАНТИРУЕТСЯ, что он присутствует в этом множестве.
 * Программа должна вывести для каждой операции одну из двух строк OK или FAIL, в зависимости от того, встречается ли данное слово в нашем множестве.
 *
 * Sample Input:
 * + hello
 * + bye
 * ? bye
 * + bye
 * - bye
 * ? bye
 * ? hello
 * Sample Output:
 * OK
 * OK
 * OK
 * FAIL
 * OK
 * FAIL
 * OK
 */

#include <iostream>
#include <unordered_set>

int main() {
  std::unordered_set<std::string> us;
  std::string s;
  char cmd;

  while (std::cin >> cmd) {
    std::cin >> s;

    switch (cmd) {
    case '+':
      if (us.find(s) == us.cend()) {
        us.emplace(s);
        std::cout << "OK" << std::endl;
      }
      else {
        std::cout << "FAIL" << std::endl;
      }
      break;
    case '-': {
      auto it = us.find(s);
      if (it != us.cend()) {
        us.erase(it);
        std::cout << "OK" << std::endl;
      }
      else {
        std::cout << "FAIL" << std::endl;
      }
      break;
    }
    case '?':
      if (us.find(s) != us.cend()) {
        std::cout << "OK" << std::endl;
      }
      else {
        std::cout << "FAIL" << std::endl;
      }
      break;
    }
  }

  return 0;
}
